// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: meta_service.proto

package metaservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaRpcServiceClient is the client API for MetaRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaRpcServiceClient interface {
	AllocSchemaID(ctx context.Context, in *AllocSchemaIdRequest, opts ...grpc.CallOption) (*AllocSchemaIdResponse, error)
	GetTablesOfShards(ctx context.Context, in *GetTablesOfShardsRequest, opts ...grpc.CallOption) (*GetTablesOfShardsResponse, error)
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	DropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTableResponse, error)
	RouteTables(ctx context.Context, in *RouteTablesRequest, opts ...grpc.CallOption) (*RouteTablesResponse, error)
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	FetchCompactionNode(ctx context.Context, in *FetchCompactionNodeRequest, opts ...grpc.CallOption) (*FetchCompactionNodeResponse, error)
	NodeHeartbeat(ctx context.Context, in *NodeHeartbeatRequest, opts ...grpc.CallOption) (*NodeHeartbeatResponse, error)
}

type metaRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaRpcServiceClient(cc grpc.ClientConnInterface) MetaRpcServiceClient {
	return &metaRpcServiceClient{cc}
}

func (c *metaRpcServiceClient) AllocSchemaID(ctx context.Context, in *AllocSchemaIdRequest, opts ...grpc.CallOption) (*AllocSchemaIdResponse, error) {
	out := new(AllocSchemaIdResponse)
	err := c.cc.Invoke(ctx, "/meta_service.MetaRpcService/AllocSchemaID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRpcServiceClient) GetTablesOfShards(ctx context.Context, in *GetTablesOfShardsRequest, opts ...grpc.CallOption) (*GetTablesOfShardsResponse, error) {
	out := new(GetTablesOfShardsResponse)
	err := c.cc.Invoke(ctx, "/meta_service.MetaRpcService/GetTablesOfShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRpcServiceClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, "/meta_service.MetaRpcService/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRpcServiceClient) DropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTableResponse, error) {
	out := new(DropTableResponse)
	err := c.cc.Invoke(ctx, "/meta_service.MetaRpcService/DropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRpcServiceClient) RouteTables(ctx context.Context, in *RouteTablesRequest, opts ...grpc.CallOption) (*RouteTablesResponse, error) {
	out := new(RouteTablesResponse)
	err := c.cc.Invoke(ctx, "/meta_service.MetaRpcService/RouteTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRpcServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, "/meta_service.MetaRpcService/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRpcServiceClient) FetchCompactionNode(ctx context.Context, in *FetchCompactionNodeRequest, opts ...grpc.CallOption) (*FetchCompactionNodeResponse, error) {
	out := new(FetchCompactionNodeResponse)
	err := c.cc.Invoke(ctx, "/meta_service.MetaRpcService/FetchCompactionNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRpcServiceClient) NodeHeartbeat(ctx context.Context, in *NodeHeartbeatRequest, opts ...grpc.CallOption) (*NodeHeartbeatResponse, error) {
	out := new(NodeHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/meta_service.MetaRpcService/NodeHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaRpcServiceServer is the server API for MetaRpcService service.
// All implementations must embed UnimplementedMetaRpcServiceServer
// for forward compatibility
type MetaRpcServiceServer interface {
	AllocSchemaID(context.Context, *AllocSchemaIdRequest) (*AllocSchemaIdResponse, error)
	GetTablesOfShards(context.Context, *GetTablesOfShardsRequest) (*GetTablesOfShardsResponse, error)
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	DropTable(context.Context, *DropTableRequest) (*DropTableResponse, error)
	RouteTables(context.Context, *RouteTablesRequest) (*RouteTablesResponse, error)
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	FetchCompactionNode(context.Context, *FetchCompactionNodeRequest) (*FetchCompactionNodeResponse, error)
	NodeHeartbeat(context.Context, *NodeHeartbeatRequest) (*NodeHeartbeatResponse, error)
	mustEmbedUnimplementedMetaRpcServiceServer()
}

// UnimplementedMetaRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaRpcServiceServer struct {
}

func (UnimplementedMetaRpcServiceServer) AllocSchemaID(context.Context, *AllocSchemaIdRequest) (*AllocSchemaIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocSchemaID not implemented")
}
func (UnimplementedMetaRpcServiceServer) GetTablesOfShards(context.Context, *GetTablesOfShardsRequest) (*GetTablesOfShardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTablesOfShards not implemented")
}
func (UnimplementedMetaRpcServiceServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedMetaRpcServiceServer) DropTable(context.Context, *DropTableRequest) (*DropTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (UnimplementedMetaRpcServiceServer) RouteTables(context.Context, *RouteTablesRequest) (*RouteTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteTables not implemented")
}
func (UnimplementedMetaRpcServiceServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedMetaRpcServiceServer) FetchCompactionNode(context.Context, *FetchCompactionNodeRequest) (*FetchCompactionNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCompactionNode not implemented")
}
func (UnimplementedMetaRpcServiceServer) NodeHeartbeat(context.Context, *NodeHeartbeatRequest) (*NodeHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeHeartbeat not implemented")
}
func (UnimplementedMetaRpcServiceServer) mustEmbedUnimplementedMetaRpcServiceServer() {}

// UnsafeMetaRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaRpcServiceServer will
// result in compilation errors.
type UnsafeMetaRpcServiceServer interface {
	mustEmbedUnimplementedMetaRpcServiceServer()
}

func RegisterMetaRpcServiceServer(s grpc.ServiceRegistrar, srv MetaRpcServiceServer) {
	s.RegisterService(&MetaRpcService_ServiceDesc, srv)
}

func _MetaRpcService_AllocSchemaID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocSchemaIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRpcServiceServer).AllocSchemaID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.MetaRpcService/AllocSchemaID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRpcServiceServer).AllocSchemaID(ctx, req.(*AllocSchemaIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRpcService_GetTablesOfShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTablesOfShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRpcServiceServer).GetTablesOfShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.MetaRpcService/GetTablesOfShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRpcServiceServer).GetTablesOfShards(ctx, req.(*GetTablesOfShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRpcService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRpcServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.MetaRpcService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRpcServiceServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRpcService_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRpcServiceServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.MetaRpcService/DropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRpcServiceServer).DropTable(ctx, req.(*DropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRpcService_RouteTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRpcServiceServer).RouteTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.MetaRpcService/RouteTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRpcServiceServer).RouteTables(ctx, req.(*RouteTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRpcService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRpcServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.MetaRpcService/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRpcServiceServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRpcService_FetchCompactionNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCompactionNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRpcServiceServer).FetchCompactionNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.MetaRpcService/FetchCompactionNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRpcServiceServer).FetchCompactionNode(ctx, req.(*FetchCompactionNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRpcService_NodeHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRpcServiceServer).NodeHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.MetaRpcService/NodeHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRpcServiceServer).NodeHeartbeat(ctx, req.(*NodeHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaRpcService_ServiceDesc is the grpc.ServiceDesc for MetaRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta_service.MetaRpcService",
	HandlerType: (*MetaRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocSchemaID",
			Handler:    _MetaRpcService_AllocSchemaID_Handler,
		},
		{
			MethodName: "GetTablesOfShards",
			Handler:    _MetaRpcService_GetTablesOfShards_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _MetaRpcService_CreateTable_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _MetaRpcService_DropTable_Handler,
		},
		{
			MethodName: "RouteTables",
			Handler:    _MetaRpcService_RouteTables_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _MetaRpcService_GetNodes_Handler,
		},
		{
			MethodName: "FetchCompactionNode",
			Handler:    _MetaRpcService_FetchCompactionNode_Handler,
		},
		{
			MethodName: "NodeHeartbeat",
			Handler:    _MetaRpcService_NodeHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meta_service.proto",
}
